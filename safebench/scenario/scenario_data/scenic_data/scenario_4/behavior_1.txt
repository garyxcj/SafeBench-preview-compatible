'''The ego approaches a parked car that is blocking its lane and must use the opposite lane to bypass the vehicle, cautiously monitoring oncoming traffic, and suddenly encounters a jaywalking pedestrian, requiring the ego to quickly assess the situation and respond appropriately to avoid a collision.
'''

param map = localPath('../maps/Town01.xodr') 
param carla_map = 'Town01'
model scenic.simulators.carla.model
EGO_MODEL = "vehicle.tesla.model3"

laneSecsWithLeftLane = []
for lane in network.lanes:
    for laneSec in lane.sections:
        if laneSec._laneToLeft is not None and laneSec._laneToRight is None:
            if laneSec._laneToLeft.isForward is not laneSec.isForward:
                laneSecsWithLeftLane.append(laneSec)

initLaneSec = Uniform(*laneSecsWithLeftLane)
spawn = OrientedPoint in initLaneSec.centerline

ego = Car at spawn,
    with blueprint EGO_MODEL
    
AdvAgent1 = Car following roadDirection from spawn for Range(20, 40),
    with regionContainedIn initLaneSec.lane

AdvAgent2 = Pedestrian beyond AdvAgent1 by Range(-2, 2) @ Range(4, 8),
    with heading 90 deg relative to roadDirection,
    with regionContainedIn initLaneSec.lane,
    with behavior CrossingBehavior(ego, Range(1, 5), Range(10, 20))
    
require (distance to intersection) > 50