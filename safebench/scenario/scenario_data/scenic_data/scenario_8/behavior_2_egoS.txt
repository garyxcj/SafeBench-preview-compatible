'''The ego approaches an unsignalized intersection and encounters a speeding vehicle from the left, forcing the ego to slow down and wait for a safe gap before proceeding through the intersection.
'''

param map = localPath('../maps/Town05.xodr') 
param carla_map = 'Town05'
model scenic.simulators.carla.model
EGO_MODEL = "vehicle.tesla.model3"

behavior AdversaryBehavior(SPEED, TRAJECTORY, DISTANCE):
    try:
        do FollowTrajectoryBehavior(SPEED, trajectory=TRAJECTORY)
    interrupt when (distance from self to ego) < DISTANCE:
        take SetThrottleAction(1)
        
intersection = Uniform(*filter(lambda i: i.is4Way and not i.isSignalized, network.intersections))
egoInitLane = Uniform(*intersection.incomingLanes)
egoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))
egoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]
egoSpawnPt = OrientedPoint in egoManeuver.startLane.centerline

advManeuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, egoManeuver.conflictingManeuvers)
advManeuver = Uniform(*advManeuvers)
advTrajectory = [advManeuver.startLane, advManeuver.connectingLane, advManeuver.endLane]

egoSpawnPt = OrientedPoint in egoManeuver.startLane.centerline
advSpawnPt = advManeuver.connectingLane.centerline[0]

ego = Car at egoSpawnPt,
    with blueprint EGO_MODEL

crossing_car = Car following roadDirection from advSpawnPt for Range(-5, 5),
    with behavior AdversaryBehavior(Range(6, 10), advTrajectory, Range(30, 40))
    
require 25 <= (distance to intersection) <= 45
require -110 deg <= RelativeHeading(crossing_car) <= 70 deg
require crossing_car in advManeuver.startLane or crossing_car in advManeuver.connectingLane