'''The ego attempts an unprotected left turn at an intersection while yielding to an oncoming car when the oncoming car's speed suddenly drops due to mechanical issues, necessitating the ego to rapidly reassess the situation and adjust its turn.
'''

param map = localPath('../maps/Town05.xodr') 
param carla_map = 'Town05'
model scenic.simulators.carla.model
EGO_MODEL = "vehicle.tesla.model3"

## MONITORS
monitor TrafficLights:
    freezeTrafficLights()
    while True:
        if withinDistanceToTrafficLight(ego, 100):
            setClosestTrafficLightStatus(ego, "green")
        if withinDistanceToTrafficLight(adversary, 100):
            setClosestTrafficLightStatus(adversary, "green")
        wait

behavior AdversaryBehavior(SPEED, TRAJECTORY, DISTANCE):
    try:
        do FollowTrajectoryBehavior(SPEED, trajectory=TRAJECTORY)
    interrupt when (distance from self to ego) < DISTANCE:
        take SetBrakeAction(1)
    
intersection = Uniform(*filter(lambda i: i.is4Way and i.isSignalized, network.intersections))
egoInitLane = Uniform(*intersection.incomingLanes)
egoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, egoInitLane.maneuvers))
egoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]

advManeuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, egoManeuver.conflictingManeuvers)
advManeuver = Uniform(*advManeuvers)
advTrajectory = [advManeuver.startLane, advManeuver.connectingLane, advManeuver.endLane]

egoSpawnPt = OrientedPoint in egoManeuver.startLane.centerline
advSpawnPt = advManeuver.connectingLane.centerline[0]

ego = Car at egoSpawnPt,
    with blueprint EGO_MODEL

adversary = Car following roadDirection from advSpawnPt for Range(4, 8),
    with behavior AdversaryBehavior(Range(6, 10), advTrajectory, Range(10, 15))
    
require 25 <= (distance to intersection) <= 45
require 160 deg <= abs(RelativeHeading(adversary)) <= 180 deg
require adversary in advManeuver.startLane or adversary in advManeuver.connectingLane